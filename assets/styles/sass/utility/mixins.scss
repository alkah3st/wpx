/**
 * width wide
 */
@mixin width-wide($width: 120%, $margin: -10%, $breakeven: 1000px) {
	width: $width;
	margin-left: $margin;

	@include breakpoint($breakeven) {
			max-width: 100%;
			margin-left: 0;
	}

}

/**
 * explode width
 */
@mixin explode-width() {
	width: 100vw;
	margin-left: calc(-50vw + 50%);
	position: relative;
}

/**
 * Vertical Align
 */
@mixin vertical-align() {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

/**
 * rhythm caps
 */
@mixin rhythm-top() {
	margin-top: 20px;
}

@mixin rhythm-bottom() {
	margin-bottom: 20px;
}

/**
 * Strip Units
 * https://css-tricks.com/snippets/sass/strip-unit-function/
 */
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}
	@return $number;
}

/**
 * Minmax for Margins/Padding
 * @param  {[type]} $style           [description]
 * @param  {[type]} $percent-top:    auto                [description]
 * @param  {[type]} $percent-bottom  :                   auto          [description]
 * @param  {[type]} $max-breakpoint: $viewport_ultrawide [description]
 * @return {[type]}                  [description]
 */
@mixin minmax($style, $percent-top: auto, $percent-bottom : auto, $max-breakpoint: $viewport_desktop) {

	#{$style}-top: $percent-top;
	#{$style}-bottom: $percent-bottom;

	$size-top: $percent-top;

	@if ($percent-top != auto and $percent-top != 0) {
		$size-top: strip-unit($percent-top)/10*100;
	}

	$size-bottom: $percent-bottom;

	@if ($percent-bottom != auto and $percent-bottom != 0) {
		$size-bottom: strip-unit($percent-bottom)/10*100;
	}

	@media only screen and (min-width: $max-breakpoint) {

		#{$style}-top: #{$size-top}px;
		#{$style}-bottom: #{$size-bottom}px;

	}

	@media only screen and (max-width: $viewport_mobile) {

		#{$style}-top: #{$size-top / 2.4}px;
		#{$style}-bottom: #{$size-bottom / 2.4}px;

	}

}

/**
 * Placeholders
 * https://engageinteractive.co.uk/blog/top-10-scss-mixins
 */
@mixin input-placeholder {
	&::-webkit-input-placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-ms-input-placeholder { @content; }
	&::placeholder { @content; }
}

/**
 * Breakpoints
 */
@mixin breakpoint($point, $minmax: "max-width") {
	@if $point == "ultrawide" {
		@media only screen and (min-width: $viewport_ultrawide) { @content; }
	} @else if $point == "desktop" {
		@media only screen and (min-width: $viewport_desktop) { @content; }
	} @else if $point == "tablet" {
		@media only screen and (max-width: $viewport_tablet) { @content; }
	} @else if $point == "phablet" {
		@media only screen and (max-width: $viewport_phablet) { @content; }
	} @else if $point == "mobile" {
		@media only screen and (max-width: $viewport_mobile) { @content; }
	} @else {
		@media only screen and ($minmax: $point) { @content; }
	}
}

/**
* Context
**/
@mixin context($max-width: var(--wp--style--global--content-size), $width: 90%) {
	margin: 0 auto;
	max-width: $max-width;
	width: $width;
}

/**
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Pixel-based size (px)
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px) optional
/// @param {Number}   $fallback    - Fallback for viewport-based units (default to $size)
/// @example scss - 5vw font size (with 50px fallback), minumum of 35px and maximum of 150px:
/// @include responsive-font(50px, 35px, 150px);
*/
@mixin font-size($preferred-size, $min-size: $preferred-size, $max-size: $preferred-size, $viewport-context: 1000px) {
  
  // Convert the preferred size to viewport units
   $preferred-size-vw: $preferred-size * 100 / $viewport-context;

  // Generate the clamp value
  font-size: clamp($min-size, #{$preferred-size-vw}vw, $max-size);

}

/**
 * Background Retina Sprites
 * http://chrisltd.com/blog/2013/05/retina-images-sass/
 */
@mixin bg-retina($file, $type, $width, $height) {
	background-image: url("../images/" + $file + '.' + $type);
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (-moz-min-device-pixel-ratio: 2),
		only screen and (-o-min-device-pixel-ratio: 2/1),
		only screen and (min-device-pixel-ratio: 2),
		only screen and (min-resolution: 192dpi),
		only screen and (min-resolution: 2dppx){
		& {
			background-image: url("../images/" + $file + '@2x.' + $type);
			-webkit-background-size: $width $height;
			-moz-background-size: $width $height;
			-o-background-size: $width $height;
			background-size: $width $height;
		}
	}
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}

/**
 * CSS Triangle
 * https://engageinteractive.co.uk/blog/top-10-scss-mixins
 */
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
	@include pseudo($pos: $position);
	width: 0;
	height: 0;
	@if $round {
		border-radius: 3px;
	}
	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round( $size / 2.5 );
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round( $size / 2.5 );
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if  $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}