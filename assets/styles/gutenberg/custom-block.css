/*
utilities
*/
/**
 * Vertical Align
 */
/**
 * rhythm caps
 */
/**
 * Strip Units
 * https://css-tricks.com/snippets/sass/strip-unit-function/
 */
/**
 * Minmax for Margins/Padding
 * @param  {[type]} $style           [description]
 * @param  {[type]} $percent-top:    auto                [description]
 * @param  {[type]} $percent-bottom  :                   auto          [description]
 * @param  {[type]} $max-breakpoint: $viewport_ultrawide [description]
 * @return {[type]}                  [description]
 */
/**
 * Placeholders
 * https://engageinteractive.co.uk/blog/top-10-scss-mixins
 */
/**
 * Breakpoints
 */
/**
* Context
**/
/**
 * Based on Sassbreak calc:
 * http://sassbreak.com/viewport-relative-headings-with-sass/
 */
/**
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Pixel-based size (px)
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px) optional
/// @param {Number}   $fallback    - Fallback for viewport-based units (default to $size)
/// @example scss - 5vw font size (with 50px fallback), minumum of 35px and maximum of 150px:
/// @include responsive-font(50px, 35px, 150px);
*/
/**
 * Background Retina Sprites
 * http://chrisltd.com/blog/2013/05/retina-images-sass/
 */
/**
 * CSS Triangle
 * https://engageinteractive.co.uk/blog/top-10-scss-mixins
 */
/**
 * unset gutenberg max-width
 */
.wp-block {
  max-width: 100%; }

/**
 * global context
 */
/**
 * animations
 */
/**
 * colors
 */
/**
 * rhythm margin
 */
/**
 * font families
 */
/**
 * viewports
 */
/**
 * custom block
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
